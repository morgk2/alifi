import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/store_product.dart';
import '../models/order.dart' as store_order;
import '../services/auth_service.dart';
import '../services/database_service.dart';
import '../services/currency_service.dart';

class PaymentPage extends StatefulWidget {
  final StoreProduct product;
  final Map<String, dynamic> selectedAddress;
  final double subtotal;
  final double tax;
  final double total;
  final int quantity;

  const PaymentPage({
    super.key,
    required this.product,
    required this.selectedAddress,
    required this.subtotal,
    required this.tax,
    required this.total,
    required this.quantity,
  });

  @override
  State<PaymentPage> createState() => _PaymentPageState();
}

class _PaymentPageState extends State<PaymentPage> {
  int _selectedPaymentIndex = -1;

  final List<Map<String, dynamic>> _paymentMethods = [
    {'name': 'PayPal', 'icon': 'assets/images/paypal_logo.png'},
    {
      'name': 'CIB_SB',
      'icon': 'assets/images/cib_logo.png',
      'icon2': 'assets/images/sb_logo.png'
    },
    {'name': 'Visa/Mastercard', 'icon': 'assets/images/visa_mastercard.png'},
    {'name': 'Stripe', 'icon': 'assets/images/stripe_logo.png'},
    {'name': 'Payment on Delivery', 'icon': null},
  ];

  void _processPayment() {
    if (_selectedPaymentIndex == -1) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Please select a payment method.'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    final method = _paymentMethods[_selectedPaymentIndex];
    if (method['name'] == 'Payment on Delivery') {
      _processPaymentOnDelivery();
    } else {
      // TODO: Implement other payment methods
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('${method['name']} payment coming soon!'),
          backgroundColor: Colors.orange,
        ),
      );
    }
  }

  void _processPaymentOnDelivery() async {
    try {
      final authService = Provider.of<AuthService>(context, listen: false);
      final user = authService.currentUser;
      
      if (user != null) {
        // Get store information
        final storeDoc = await FirebaseFirestore.instance.collection('users').doc(widget.product.storeId).get();
        final storeName = storeDoc.exists 
            ? (storeDoc.data() as Map<String, dynamic>)['displayName'] ?? 'Store'
            : 'Store';

        // Create the order using the proper DatabaseService method
        final order = store_order.StoreOrder(
          id: '', // Will be generated by Firestore
          customerId: user.id,
          customerName: user.displayName?.isNotEmpty == true ? user.displayName! : 'Anonymous',
          storeId: widget.product.storeId,
          storeName: storeName,
          productId: widget.product.id,
          productName: widget.product.name,
          productImageUrl: widget.product.imageUrls.isNotEmpty ? widget.product.imageUrls.first : '',
          price: widget.product.price,
          quantity: widget.quantity,
          status: 'ordered',
          createdAt: DateTime.now(),
          chatMessageId: '', // Will be set after creating the order
        );

        // Create the order using DatabaseService (this will increment product totalOrders)
        final orderId = await DatabaseService().createOrder(order);

        // Create initial conversation message about the order
        await FirebaseFirestore.instance.collection('chat_messages').add({
          'senderId': user.id,
          'receiverId': widget.product.storeId,
          'message': 'Hello! I just placed an order for ${widget.product.name}. Order ID: $orderId',
          'timestamp': FieldValue.serverTimestamp(),
          'isRead': false,
          'productAttachment': {
            'id': widget.product.id,
            'name': widget.product.name,
            'price': widget.product.price,
            'imageUrl': widget.product.imageUrls.isNotEmpty ? widget.product.imageUrls.first : '',
          },
          'isOrderAttachment': true,
          'orderId': orderId,
        });

        Navigator.of(context).pushReplacement(
          MaterialPageRoute(
            builder: (context) => OrderConfirmationPage(
              orderTotal: widget.total,
              paymentMethod: 'Payment on Delivery',
            ),
          ),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error processing order: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: Image.asset(
          'assets/images/back_icon.png',
          width: 24,
          height: 24,
          color: Colors.black,
        ),
          onPressed: () => Navigator.pop(context),
        ),
        title: const Text(
          'Payment',
          style: TextStyle(
            color: Colors.black,
            fontSize: 20,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
      body: Column(
        children: [
          // Order Summary Card
          Container(
            margin: const EdgeInsets.all(16),
            padding: const EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(16),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.05),
                  blurRadius: 10,
                  offset: const Offset(0, 2),
                ),
              ],
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text(
                  'Order Summary',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    ClipRRect(
                      borderRadius: BorderRadius.circular(8),
                      child: Image.network(
                        widget.product.imageUrls.isNotEmpty ? widget.product.imageUrls.first : '',
                        width: 60,
                        height: 60,
                        fit: BoxFit.cover,
                        errorBuilder: (context, error, stackTrace) {
                          return Container(
                            width: 60,
                            height: 60,
                            decoration: BoxDecoration(
                              color: Colors.grey[300],
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Icon(Icons.image, color: Colors.grey[600]),
                          );
                        },
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            widget.product.name,
                            style: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                            maxLines: 2,
                            overflow: TextOverflow.ellipsis,
                          ),
                          const SizedBox(height: 4),
                          Consumer<CurrencyService>(
                            builder: (context, currencyService, child) {
                              return Text(
                                'Qty: ${widget.quantity} Ã— ${currencyService.formatPrice(widget.product.price)}',
                                style: const TextStyle(
                                  fontSize: 16,
                                  color: Colors.green,
                                  fontWeight: FontWeight.bold,
                                ),
                              );
                            },
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                const Divider(),
                const SizedBox(height: 8),
                Consumer<CurrencyService>(
                  builder: (context, currencyService, child) {
                    return Column(
                      children: [
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            const Text('Subtotal'),
                            Text(currencyService.formatPrice(widget.subtotal)),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            const Text('Tax'),
                            Text(currencyService.formatPrice(widget.tax)),
                          ],
                        ),
                      ],
                    );
                  },
                ),
                const SizedBox(height: 8),
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    const Text('Shipping'),
                    const Text(
                      'Free',
                      style: TextStyle(
                        color: Colors.green,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
                const Divider(),
                Consumer<CurrencyService>(
                  builder: (context, currencyService, child) {
                    return Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        const Text(
                          'Total',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          currencyService.formatPrice(widget.total),
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.green,
                          ),
                        ),
                      ],
                    );
                  },
                ),
              ],
            ),
          ),
          // Payment Methods
          Expanded(
            child: Container(
              margin: const EdgeInsets.symmetric(horizontal: 16),
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.05),
                    blurRadius: 10,
                    offset: const Offset(0, 2),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'Payment Method',
                    style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 16),
                  Expanded(
                    child: ListView.builder(
                      itemCount: _paymentMethods.length,
                      itemBuilder: (context, index) {
                        final method = _paymentMethods[index];
                        final isSelected = _selectedPaymentIndex == index;

                        return GestureDetector(
                          onTap: () {
                            setState(() {
                              _selectedPaymentIndex = index;
                            });
                          },
                          child: Container(
                            margin: const EdgeInsets.only(bottom: 12),
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: isSelected ? Colors.green[50] : Colors.grey[50],
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: isSelected ? Colors.green : Colors.grey[300]!,
                                width: isSelected ? 2 : 1,
                              ),
                            ),
                            child: Row(
                              children: [
                                if (method['icon'] != null && method['name'] != 'CIB_SB')
                                  Image.asset(
                                    method['icon'],
                                    width: 40,
                                    height: 40,
                                    errorBuilder: (context, error, stackTrace) {
                                      return Container(
                                        width: 40,
                                        height: 40,
                                        decoration: BoxDecoration(
                                          color: Colors.grey[300],
                                          borderRadius: BorderRadius.circular(8),
                                        ),
                                        child: Icon(Icons.payment, color: Colors.grey[600]),
                                      );
                                    },
                                  )
                                else if (method['name'] == 'CIB_SB')
                                  Row(
                                    children: [
                                      Image.asset(
                                        method['icon'],
                                        width: 40,
                                        height: 40,
                                        errorBuilder: (context, error, stackTrace) {
                                          return Container(
                                            width: 40,
                                            height: 40,
                                            decoration: BoxDecoration(
                                              color: Colors.grey[300],
                                              borderRadius: BorderRadius.circular(8),
                                            ),
                                            child: Icon(Icons.payment, color: Colors.grey[600]),
                                          );
                                        },
                                      ),
                                      const SizedBox(width: 8),
                                      Image.asset(
                                        method['icon2'],
                                        width: 40,
                                        height: 40,
                                        errorBuilder: (context, error, stackTrace) {
                                          return Container(
                                            width: 40,
                                            height: 40,
                                            decoration: BoxDecoration(
                                              color: Colors.grey[300],
                                              borderRadius: BorderRadius.circular(8),
                                            ),
                                            child: Icon(Icons.payment, color: Colors.grey[600]),
                                          );
                                        },
                                      ),
                                    ],
                                  )
                                else
                                  Container(
                                    width: 40,
                                    height: 40,
                                    decoration: BoxDecoration(
                                      color: Colors.green[100],
                                      borderRadius: BorderRadius.circular(8),
                                    ),
                                    child: const Icon(Icons.account_balance, color: Colors.green),
                                  ),
                                const SizedBox(width: 16),
                                Expanded(
                                  child: Text(
                                    method['name'].replaceAll('_', ' & '),
                                    style: const TextStyle(
                                      fontSize: 16,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                ),
                                if (isSelected)
                                  const Icon(Icons.check_circle, color: Colors.green),
                              ],
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
      bottomNavigationBar: SafeArea(
        child: Container(
          padding: const EdgeInsets.fromLTRB(16, 24, 16, 32),
          decoration: BoxDecoration(
            color: Colors.white,
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 10,
                offset: const Offset(0, -5),
              ),
            ],
          ),
          child: SizedBox(
            height: 64,
            child: ElevatedButton(
              onPressed: _processPayment,
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(16),
                ),
                elevation: 0,
              ),
              child: const Text(
                'Complete Payment',
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }
}

class OrderConfirmationPage extends StatelessWidget {
  final double orderTotal;
  final String paymentMethod;

  const OrderConfirmationPage({
    super.key,
    required this.orderTotal,
    required this.paymentMethod,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Container(
                width: 120,
                height: 120,
                decoration: const BoxDecoration(
                  color: Colors.green,
                  shape: BoxShape.circle,
                ),
                child: const Icon(
                  Icons.check,
                  color: Colors.white,
                  size: 60,
                ),
              ),
              const SizedBox(height: 32),
              const Text(
                'Order Confirmed!',
                style: TextStyle(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 16),
                             Consumer<CurrencyService>(
                 builder: (context, currencyService, child) {
                   return Text(
                     'Your order of ${currencyService.formatPrice(orderTotal)} has been confirmed.',
                     style: TextStyle(
                       fontSize: 16,
                       color: Colors.grey[600],
                     ),
                     textAlign: TextAlign.center,
                   );
                 },
               ),
              const SizedBox(height: 24),
              if (paymentMethod == 'Payment on Delivery') ...[
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: Colors.green[50],
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.green[200]!),
                  ),
                  child: Column(
                    children: [
                      Icon(
                        Icons.delivery_dining,
                        color: Colors.green[700],
                        size: 32,
                      ),
                      const SizedBox(height: 12),
                      Text(
                        'Payment on Delivery',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.green[700],
                        ),
                      ),
                      const SizedBox(height: 8),
                      Text(
                        'Your order has been confirmed! You will pay when the product is delivered to your address.',
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.green[700],
                        ),
                        textAlign: TextAlign.center,
                      ),
                    ],
                  ),
                ),
              ],
              const SizedBox(height: 48),
              SizedBox(
                width: double.infinity,
                height: 56,
                child: ElevatedButton(
                  onPressed: () {
                    Navigator.of(context).popUntil((route) => route.isFirst);
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(16),
                    ),
                  ),
                  child: const Text(
                    'Back to Home',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}