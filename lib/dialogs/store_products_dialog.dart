import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import '../models/store_product.dart';
import '../models/order.dart' as store_order;
import '../models/user.dart';
import '../services/database_service.dart';
import '../services/auth_service.dart';
import '../dialogs/order_action_dialog.dart';
import 'package:provider/provider.dart';

class StoreProductsDialog extends StatefulWidget {
  final User storeUser;
  final Function(store_order.StoreOrder) onOrderPlaced;

  const StoreProductsDialog({
    super.key,
    required this.storeUser,
    required this.onOrderPlaced,
  });

  @override
  State<StoreProductsDialog> createState() => _StoreProductsDialogState();
}

class _StoreProductsDialogState extends State<StoreProductsDialog>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _slideAnimation;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      duration: const Duration(milliseconds: 300),
      vsync: this,
    );
    _slideAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeOutCubic,
    ));
    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

     Future<void> _placeOrder(StoreProduct product) async {
    // Show confirmation dialog first
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => OrderActionDialog.placeOrder(
        productName: product.name,
        price: product.price,
        quantity: 1, // Default quantity for contact store orders
        onConfirm: () {
          Navigator.of(context).pop(true);
        },
      ),
    );

    if (confirmed != true) {
      return; // User cancelled
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final authService = Provider.of<AuthService>(context, listen: false);
      final currentUser = authService.currentUser;
      
      // Debug logging
      print('Debug: currentUser = ${currentUser?.id}');
      print('Debug: storeUser.id = ${widget.storeUser.id}');
      print('Debug: product.id = ${product.id}');
      print('Debug: product.name = ${product.name}');
      print('Debug: product.imageUrls = ${product.imageUrls}');
      
      if (currentUser != null && currentUser.id.isNotEmpty && widget.storeUser.id.isNotEmpty && product.id.isNotEmpty) {
        // Send a chat message with the order first
        final message = "I'd like to order: ${product.name ?? 'Product'} - \$${product.price.toStringAsFixed(2)}";
        final productImageUrl = product.imageUrls.isNotEmpty ? product.imageUrls.first : '';
        final productName = product.name.isNotEmpty ? product.name : 'Product';
        
        print('Debug: About to send chat message');
        print('Debug: senderId = ${currentUser.id}');
        print('Debug: receiverId = ${widget.storeUser.id}');
        print('Debug: message = $message');
        
        String messageId;
        try {
          messageId = await DatabaseService().sendChatMessage(
            currentUser.id,
            widget.storeUser.id,
            message,
            productAttachment: {
              'type': 'order',
              'productId': product.id,
              'productName': productName,
              'productImageUrl': productImageUrl,
              'price': product.price,
            },
          );
          print('Debug: Chat message sent successfully, messageId = $messageId');
        } catch (e) {
          print('Debug: Error sending chat message: $e');
          throw Exception('Failed to send chat message: $e');
        }

        // Create the order with the chat message ID
        final order = store_order.StoreOrder(
          id: '', // Will be generated by Firestore
          customerId: currentUser.id,
          customerName: currentUser.displayName?.isNotEmpty == true ? currentUser.displayName! : 'Anonymous',
          storeId: widget.storeUser.id,
          storeName: widget.storeUser.displayName?.isNotEmpty == true ? widget.storeUser.displayName! : 'Store',
          productId: product.id,
          productName: productName,
          productImageUrl: productImageUrl,
          price: product.price,
          quantity: 1,
          status: 'pending',
          createdAt: DateTime.now(),
          chatMessageId: messageId, // Set the chat message ID
        );

        // Create the order
        String orderId;
        try {
          orderId = await DatabaseService().createOrder(order);
          print('Debug: Order created successfully, orderId = $orderId');
        } catch (e) {
          print('Debug: Error creating order: $e');
          throw Exception('Failed to create order: $e');
        }
        
        // Update the chat message with the order ID
        await DatabaseService().updateChatMessageAttachment(messageId, {
          'type': 'order',
          'orderId': orderId,
          'productId': product.id,
          'productName': productName,
          'productImageUrl': productImageUrl,
          'price': product.price,
        });

        // Show success message first
        try {
          print('Debug: About to show success message');
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('Order placed successfully!'),
              backgroundColor: Colors.green,
            ),
          );
          print('Debug: Success message shown');
        } catch (e) {
          print('Debug: Error showing success message: $e');
          throw Exception('Error showing success message: $e');
        }

         // Call the callback
         try {
           print('Debug: About to call onOrderPlaced callback');
           final updatedOrder = order.copyWith(
             id: orderId,
             chatMessageId: messageId,
           );
           print('Debug: Order copyWith successful');
           widget.onOrderPlaced(updatedOrder);
           print('Debug: onOrderPlaced callback completed');
         } catch (e) {
           print('Debug: Error in callback: $e');
           throw Exception('Error in order callback: $e');
         }

         // Close the dialog
         try {
           print('Debug: About to close dialog');
           Navigator.of(context).pop();
           print('Debug: Dialog closed successfully');
         } catch (e) {
           print('Debug: Error closing dialog: $e');
           throw Exception('Error closing dialog: $e');
         }
       } else {
         // Show error for validation failure
         ScaffoldMessenger.of(context).showSnackBar(
           SnackBar(
             content: Text('Failed to place order: Invalid user or product data'),
             backgroundColor: Colors.red,
           ),
         );
       }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Failed to place order: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedBuilder(
      animation: _slideAnimation,
      builder: (context, child) {
        return Transform.translate(
          offset: Offset(0, (1 - _slideAnimation.value) * 300),
          child: Column(
            children: [
              // Header
              Padding(
                padding: EdgeInsets.all(16),
                child: Row(
                  children: [
                    CircleAvatar(
                      radius: 20,
                      backgroundImage: widget.storeUser.photoURL != null
                          ? CachedNetworkImageProvider(widget.storeUser.photoURL!)
                          : null,
                      child: widget.storeUser.photoURL == null
                          ? Text(
                              (widget.storeUser.displayName ?? 'S')[0].toUpperCase(),
                              style: TextStyle(
                                color: Colors.white,
                                fontWeight: FontWeight.bold,
                              ),
                            )
                          : null,
                    ),
                    SizedBox(width: 12),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '${widget.storeUser.displayName ?? 'Store'}\'s Products',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              fontFamily: 'Inter',
                            ),
                          ),
                          Text(
                            'Select a product to order',
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.grey[600],
                              fontFamily: 'Inter',
                            ),
                          ),
                        ],
                      ),
                    ),
                    IconButton(
                      icon: Icon(Icons.close),
                      onPressed: () => Navigator.of(context).pop(),
                    ),
                  ],
                ),
              ),
              
              // Products list
              Expanded(
                child: StreamBuilder<List<StoreProduct>>(
                  stream: DatabaseService().getProductsByStore(widget.storeUser.id),
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      return Center(child: CircularProgressIndicator());
                    }
                    
                    if (snapshot.hasError) {
                      return Center(
                        child: Text('Error loading products: ${snapshot.error}'),
                      );
                    }
                    
                    final products = snapshot.data ?? [];
                    
                    if (products.isEmpty) {
                      return Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.inventory_2_outlined,
                              size: 64,
                              color: Colors.grey[400],
                            ),
                            SizedBox(height: 16),
                            Text(
                              'No products available',
                              style: TextStyle(
                                fontSize: 16,
                                color: Colors.grey[600],
                                fontFamily: 'Inter',
                              ),
                            ),
                          ],
                        ),
                      );
                    }
                    
                    return ListView.builder(
                      padding: EdgeInsets.symmetric(horizontal: 16),
                      itemCount: products.length,
                      itemBuilder: (context, index) {
                        final product = products[index];
                        return Card(
                          margin: EdgeInsets.only(bottom: 12),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: ListTile(
                            contentPadding: EdgeInsets.all(12),
                            leading: ClipRRect(
                              borderRadius: BorderRadius.circular(8),
                              child: product.imageUrls.isNotEmpty
                                  ? CachedNetworkImage(
                                      imageUrl: product.imageUrls.first,
                                      width: 60,
                                      height: 60,
                                      fit: BoxFit.cover,
                                      placeholder: (context, url) => Container(
                                        width: 60,
                                        height: 60,
                                        color: Colors.grey[200],
                                        child: Center(child: CircularProgressIndicator()),
                                      ),
                                      errorWidget: (context, url, error) => Container(
                                        width: 60,
                                        height: 60,
                                        color: Colors.grey[200],
                                        child: Icon(Icons.error),
                                      ),
                                    )
                                  : Container(
                                      width: 60,
                                      height: 60,
                                      color: Colors.grey[200],
                                      child: Icon(Icons.image_not_supported, color: Colors.grey[400]),
                                    ),
                            ),
                            title: Text(
                              product.name,
                              style: TextStyle(
                                fontWeight: FontWeight.bold,
                                fontSize: 16,
                                fontFamily: 'Inter',
                              ),
                            ),
                            subtitle: Text(
                              '\$${product.price.toStringAsFixed(2)}',
                              style: TextStyle(
                                color: Colors.green[600],
                                fontWeight: FontWeight.bold,
                                fontSize: 14,
                                fontFamily: 'Inter',
                              ),
                            ),
                            trailing: _isLoading
                                ? SizedBox(
                                    width: 20,
                                    height: 20,
                                    child: CircularProgressIndicator(strokeWidth: 2),
                                  )
                                : ElevatedButton(
                                    onPressed: () => _placeOrder(product),
                                    style: ElevatedButton.styleFrom(
                                      backgroundColor: Colors.green,
                                      foregroundColor: Colors.white,
                                      shape: RoundedRectangleBorder(
                                        borderRadius: BorderRadius.circular(20),
                                      ),
                                    ),
                                    child: Text(
                                      'Order',
                                      style: TextStyle(
                                        fontSize: 12,
                                        fontWeight: FontWeight.bold,
                                        fontFamily: 'Inter',
                                      ),
                                    ),
                                  ),
                          ),
                        );
                      },
                    );
                  },
                ),
              ),
            ],
          ),
        );
      },
    );
  }
} 